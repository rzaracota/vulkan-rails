SConscript(['shaders/sconscript', 'input/sconscript'])

Default('driver')

import os

env = Environment(ENV = os.environ)

env.Append(CCFLAGS='-g')

binary = 'driver'
library_path = 'LD_LIBRARY_PATH=./input'

env.Program(binary, ['main.cpp', 'vulkandevice.cpp', 'particleengine.cpp'],
                            LIBS=['glfw', 'vulkan', 'evdev', 'inputmanager'],
                            LIBPATH=['input'])

test = env.Command('test', None, "LD_LIBRARY_PATH=./input ./driver")

test_debug = env.Command('test_debug', None,
                            "LD_LIBRARY_PATH=./input gdb ./driver")

test_input = env.Command('test_input', None,
        "LD_LIBRARY_PATH=./input ./input/inputtest")

cachegrind = env.Command('cachegrind', None,
        ' '.join([library_path, 'valgrind --tool=cachegrind', './' + binary]))

callgrind = env.Command('callgrind', None,
        ' '.join([library_path, 'valgrind --tool=callgrind', './' + binary]))

Depends(binary, 'vulkanapp.h')
Depends(test, binary)
Depends(test_debug, binary)
Depends(test_input, 'input/inputtest')
Depends(cachegrind, binary)
Depends(callgrind, binary)
